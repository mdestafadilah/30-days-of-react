---
page_id: 30-days-of-react/day-1
permalink: day-1
title: What is React?
description: Today, we're starting out at the beginning. Let's look at what React is and what makes it tick. We'll discuss why we want to use it.
day: 1
hero_image: /assets/images/series/30-days-of-react/headings/1.jpg
imageUrl: /assets/images/series/30-days-of-react/headings/1.jpg
dayDir: '01'
introBannerUrl: '/assets/images/series/30-days-of-react/headings/1_wide.jpg'
date: Tue Oct 04 2016 21:29:25 GMT-0700 (PDT)
includeFile: ./../_params.yaml
---

Selama 30 hari kedepan, kamu akan merasakan bagian dari [React](https://facebook.github.io/react/) kerangka kerja web dan alur perkembangan.

Setiap waktu selama 30 hari perjalanan akan selalu membahas materi sebelumnya, jadi diakhir cerita, kamu tidak hanya tau aturan, konsep dan dasar dasar kerangka kerja itu bekerja, tapi dapat mengaplikasikannya disetiap aplikasi web. 

Mari kita mulai. Kita akan mulai [pertama kali](https://www.youtube.com/watch?v=1RW3nDRmu6k) selahkan dilihat, bagus untuk permulaan.

## Apa itu React?

[React](https://facebook.github.io/react/) Sebuah library Javascript untuk pengembang tampilan muka. Semacam tampilan awal sebuah aplikasi web.

Setiap inti dari semua aplikasi React adalah **komponen**. Sebuah komponen itu sendiri mengandung modul sebagai tampilan. Kita dapat membuat elemen halaman, seperti tombol atau kolom inputan sebagai **Komponen React**. Komponen dalam react bersifat _composable_ (mudah digunakan kembali). Sebuah komponen mungkin memiliki satu atau lebih komponen lain yang tampil.

Pada umumnya, untuk membuat aplikasi React, kita akan membuat sebuah Komponen komponen, yang mengindikasikan bermacam macam tampilan elemen. Kita dapat mengatur komponen tersebut secara lebih mantap dimana menggambarkan struktur dari aplikasi kita.

Sebagai contoh, kita ambil sebuah form. Sebuah form mungkin saja terdapat banyak tampilan elemen, seperti kolom input, label atau tombol. Setiap elemen form didalamnya dapat saja ditulis ulang sebagai komponen React. Kita sudah masuk ke konsep lebih mantap, komponen form itu sendiri. Sebuah komponen form, mungkin memiliki struktur yang lebih spesifik dan setiap elemen interface ada didalamnya.

Penting, setiap kompoenen dalam aplikasi React memiliki manajemen data yang ketat. Komplek, tampilan user yang interaktif melibatkan data kompleks dan state (data) aplikasi. Area pengembangan React dibatasi dan ditunjukan untuk kita untuk dapat mengantisipasi bagaimana aplikasi kita akan terlihat dalam serangkaian keadaan tertentu. Kita akan pelajari itu semua dalam pelatihan ini.

## Baiklah, bagimana kita dapat menggunakannya?

React adalah Kerangka kerja JavaScript. Menggunakan kerangka kerja semudah memperkenalkan sebuah file JavaScript di HTML dan menggunakan fungsi ekport `React` diaplikasi kita.

Sebagai contoh, the _Hello world_, dari sebuah website akan semudah seperti ini:

```html
<html>
<head>
  <meta charset="utf-8">
  <title>Hello world</title>
  <!-- Script tags including React -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.9.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.6/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/6.1.19/browser.min.js"></script>
</head>
<body>
  <div id="app"></div>
  <script type="text/babel">
    ReactDOM.render(
      <h1>Hello world</h1>,
      document.getElementById('#app')
    );
  </script>
</body>
</html>
```

Bagaimanapun, terlihat menyeramkan bukan?, sebuah kode JavaScript dalam sebaris menampilkan _Hello wordl_ dihalaman. catat kita hanya membutuhkan sebuah JavaScirpt untuk dapat melihatnya.

## Bagaimana cara kerjanya?

Tidak seperti `predecessors`, operasi React tidak langsung pada DOM (Document Object Model) browser secara langsung!, tapi sebuah **virtual DOM**. Hanya itu, dibanding memanipulasi sebuah `document` didalam browser setelah perubahan terhadap data (dimana akan sedikit lama) dan itu bisa diatas dalam sebuah virtual DOM. Setelah virtual DOM diubah, React secara cerdas akan menentukan apa yang berubah di DOM sebenarnya.

Sebuah [Virtual DOM React](https://facebook.github.io/react/docs/dom-differences.html) ada disetiap memori dan ditampilkan ulang oleh DOM browser, tapi kita akan membuat komponen virtual, dimana React sendiri yang akan menampilkan ulang DOM itu sendiri.

Di artikel selanjut, kita akan melihat apa maksud dari virtual DOM dalam membangun komponen React dan masuk pada JSX dan membuat komponen pertama kita.
